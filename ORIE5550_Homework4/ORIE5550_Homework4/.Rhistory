msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
forecasted_periods <- c(219:223)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
lines(forecasted_periods, lower, lty=2, lwd=2)
lines(forecasted_periods, upper, lty=2, lwd=2)
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="aic",allowmean = FALSE) # AIC
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="bic",allowmean = FALSE) # BIC
arma.model.2e <- arima(training_data, order=c(1,1,0), include.mean = FALSE, method = "ML")
h = 5
arma.forecast.2e <- predict(arma.model.2e, h)
round(arma.forecast.2e$pred, 3)
round(arma.forecast.2e$se, 3)
lower <- arma.forecast.2e$pred - (1.96 * arma.forecast.2e$se)
upper <- arma.forecast.2e$pred + (1.96 * arma.forecast.2e$se)
msfe <- mean( (arma.forecast.2e$pred - as.numeric(test_data))^2 )
msfe
set.seed(99)
n_steps <- 100
Z_t <- rnorm(n_steps)
t <- seq_len(n_steps)
X_t <- -1 * 0.2 * t + 0.8 * cumsum(Z_t)
par(mfrow = c(2,2))
plot(t, X_t, type = 'l', col = 'blue', xlab = 'Time', ylab = 'X_t',
main = 'Random Walk: X_t = -0.2*t + 0.8* Z_t')
acf(X_t, main="ACF of Residuals from the ARMA model")
pacf(X_t, lag.max=20, ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
auto.arima(X_t,max.p=20,max.q=20, max.d=0, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=0, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t, order=c(0,0,1), method = "ML") #include.drift = TRUE,
arma.model
ur.gt <- ur.df(X_t, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='drift')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='none')
summary(ur.gt)
data(Raotbl3)
attach(Raotbl3)
lc_TS <- ts(lc, start = c(1966, 4), end = c(1991, 2), frequency = 4)
plot(lc_TS, type="l", main="Real consumption exp., U.K., 1966-Q4 to 1991-Q2.",
ylab = "Expenditure", xlab = "Quarter")
ur.gt <- ur.df(lc_TS, lags=3, type='trend')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=3, type='drift')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=3, type='none')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='trend')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='drift')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='none')
summary(ur.gt)
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
ur.gt <- ur.df(gnp_data, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(gnp_data, lags=1, type='drift')
summary(ur.gt)
ur.gt <- ur.df(gnp_data, lags=1, type='none')
summary(ur.gt)
clear console
console clear
ur.gt <- ur.df(lc_TS, lags=2, type='trend')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='drift')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='none')
summary(ur.gt)
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10, max.d=0, ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
arma.model <- arima(training_data, order=c(1,0,3), include.mean = FALSE, method = "ML")
h = 5
arma.forecast <- predict(arma.model, h)
round(arma.forecast$pred, 3)
round(arma.forecast$se, 3)
lower <- arma.forecast$pred - (1.96 * arma.forecast$se)
upper <- arma.forecast$pred + (1.96 * arma.forecast$se)
msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
forecasted_periods <- c(length(training_data)+1:length(training_data)+h)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
c(length(training_data)+1:length(training_data)+h)
length(training_data)+1:length(training_data)+h
length(training_data)+1:h
forecasted_periods <- c(length(training_data)+1:h)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
lines(forecasted_periods, lower, lty=2, lwd=2)
lines(forecasted_periods, upper, lty=2, lwd=2)
arma.model <- arima(training_data, order=c(1,0,3), include.mean = FALSE, method = "ML")
h = 5
arma.forecast <- predict(arma.model, h)
round(arma.forecast$pred, 3)
round(arma.forecast$se, 3)
lower <- arma.forecast$pred - (1.96 * arma.forecast$se)
upper <- arma.forecast$pred + (1.96 * arma.forecast$se)
msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
length(training_data)+1:h
forecasted_periods <- c(length(training_data)+1:h)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
lines(forecasted_periods, lower, lty=2, lwd=2)
lines(forecasted_periods, upper, lty=2, lwd=2)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
forecasted_periods <- c(length(training_data)+1:h)
par(mfrow = c(1,1))
plot(training_data, xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
forecasted_periods <- c(length(training_data)+1:h)
par(mfrow = c(1,1))
plot(as.numeric(training_data), xlim=c(1,223), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
length(training_data)+1:h
plot(as.numeric(training_data), xlim=c(1,length(training_data)+h), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, arma.forecast$pred, lwd = 2)
length(arma.forecast$pred)
forecasted_periods
training_data
as.numeric(training_data)
arma.forecast$pred
lower
lines(forecasted_periods, as.numeric(upper), lty=2, lwd=2)
forecasted_periods <- c(length(training_data)+1:h)
par(mfrow = c(1,1))
plot(as.numeric(training_data), xlim=c(1,length(training_data)+h), main = "Forecasts for the log(GNP) time series, horizon = 5")
lines(forecasted_periods, as.numeric(arma.forecast$pred), lwd = 2)
lines(forecasted_periods, as.numeric(lower), lty=2, lwd=2)
lines(forecasted_periods, as.numeric(upper), lty=2, lwd=2)
as.numeric(arma.forecast$pred)
ur.gt <- ur.df(gnp_data, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(gnp_data, lags=1, type='drift')
summary(ur.gt)
clear
#install.packages("astsa")
library(astsa)
library(forecast)
library(urca)
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t, order=c(0,0,1), method = "ML") #include.drift = TRUE,
arma.model
arma.model <- arima(X_t, order=c(0,1,1), method = "ML") #include.drift = TRUE,
#install.packages("astsa")
library(astsa)
library(forecast)
library(urca)
gnp_data <- ts(gnp, start = c(1947, 1), end = c(2002, 3) , frequency = 4)
gnp_data = log(gnp_data)
plot(gnp_data, type="l", main="Box-Cox Log-Transform of the GNP data",
ylab = "log(gnp)", xlab = "Quarter")
# Leave out the last 5 observations as test data
training_data <- head(gnp_data, -5)
test_data <- tail(gnp_data, 5)
tt <- seq(1, length(training_data), by=1)
y <- training_data
fitModel <- lm(y ~ poly(tt, 2), data = as.data.frame(training_data))
residuals <- fitModel$residuals
par(mfrow = c(1, 2))
plot(residuals, type="l", main="Residuals of the fitted model")
acf(residuals, main="ACF of Residuals of the fitted model")
auto.arima(residuals,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(residuals,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
arma.model <- arima(residuals, order=c(1,0,3), include.mean = FALSE, method = "ML")
par(mfrow = c(1, 2))
acf(arma.model$residuals, main="ACF of Residuals from the ARMA model")
pacf(arma.model$residuals, lag.max=20,
ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
# QQ plot
qqnorm(arma.model$residuals, main = "QQ-plot of the regression residuals")
qqline(arma.model$residuals, col = "red", lwd = 2)
# Shapiro-Wilks test. Ho is normality
shapiro.test(arma.model$residuals)
#Box-Ljung test
Box.test(arma.model$residuals, lag=20, type="Ljung-Box")
arma.model <- arima(training_data, order=c(1,0,3), include.mean = FALSE, method = "ML")
h = 5
arma.forecast <- predict(arma.model, h)
round(arma.forecast$pred, 3)
round(arma.forecast$se, 3)
lower <- arma.forecast$pred - (1.96 * arma.forecast$se)
upper <- arma.forecast$pred + (1.96 * arma.forecast$se)
msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
# length(arma.forecast$pred)
# forecasted_periods
# forecasted_periods <- c(length(training_data)+1:h)
# par(mfrow = c(1,1))
# plot(as.numeric(training_data), xlim=c(1,length(training_data)+h), main = "Forecasts for the log(GNP) time series, horizon = 5")
# lines(forecasted_periods, as.numeric(arma.forecast$pred), lwd = 2)
# lines(forecasted_periods, as.numeric(lower), lty=2, lwd=2)
# lines(forecasted_periods, as.numeric(upper), lty=2, lwd=2)
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="aic",allowmean = FALSE) # AIC
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="bic",allowmean = FALSE) # BIC
arma.model.2e <- arima(training_data, order=c(1,1,0), include.mean = FALSE, method = "ML")
h = 5
arma.forecast.2e <- predict(arma.model.2e, h)
round(arma.forecast.2e$pred, 3)
round(arma.forecast.2e$se, 3)
lower <- arma.forecast.2e$pred - (1.96 * arma.forecast.2e$se)
upper <- arma.forecast.2e$pred + (1.96 * arma.forecast.2e$se)
msfe <- mean( (arma.forecast.2e$pred - as.numeric(test_data))^2 )
msfe
set.seed(99)
n_steps <- 100
Z_t <- rnorm(n_steps)
t <- seq_len(n_steps)
X_t <- -1 * 0.2 * t + 0.8 * cumsum(Z_t)
par(mfrow = c(2,2))
plot(t, X_t, type = 'l', col = 'blue', xlab = 'Time', ylab = 'X_t',
main = 'Random Walk: X_t = -0.2*t + 0.8* sum(Z_t)')
acf(X_t, main="ACF of Residuals from the ARMA model")
pacf(X_t, lag.max=20, ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t, order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
ur.gt <- ur.df(X_t, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='drift')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='none')
summary(ur.gt)
arma.model <- arima(X_t,  order=c(1,1,0), include.mean = FALSE, method = "ML") #include.drift = TRUE,
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(1,1,0), include.mean = FALSE, method = "ML") #include.drift = TRUE,
arma.model
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), include.mean = FALSE, method = "ML") #include.drift = TRUE,
arma.model
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), include.drift = TRUE, method = "ML") #include.drift = TRUE,
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
fit_random_walk_drift <- function(data) {
ts_data <- ts(data)
arima_model <- auto.arima(ts_data, stepwise = FALSE, approximation = FALSE, seasonal = FALSE, lambda = "auto")
return(arima_model)
}
# Set seed for reproducibility
set.seed(123456)
# Generate example time series data
e <- rnorm(100)
rw_nd <- cumsum(e)
trd <- 1:100
rw_wd <- 0.5 * trd + cumsum(e)
dt <- e + 0.5 * trd
# Fit random walk with drift models
model_rw_nd <- fit_random_walk_drift(rw_nd)
model_rw_wd <- fit_random_walk_drift(rw_wd)
model_dt <- fit_random_walk_drift(dt)
# Display model summaries
cat("Random Walk without Drift Model:\n")
summary(model_rw_nd)
cat("\nRandom Walk with Drift Model:\n")
summary(model_rw_wd)
cat("\nDeterministic Trend and Noise Model:\n")
summary(model_dt)
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
auto.arima(X_t, stepwise = FALSE, approximation = FALSE, seasonal = FALSE, lambda = "auto")
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
#install.packages("astsa")
library(astsa)
library(forecast)
library(urca)
gnp_data <- ts(gnp, start = c(1947, 1), end = c(2002, 3) , frequency = 4)
gnp_data = log(gnp_data)
plot(gnp_data, type="l", main="Box-Cox Log-Transform of the GNP data",
ylab = "log(gnp)", xlab = "Quarter")
# Leave out the last 5 observations as test data
training_data <- head(gnp_data, -5)
test_data <- tail(gnp_data, 5)
tt <- seq(1, length(training_data), by=1)
y <- training_data
fitModel <- lm(y ~ poly(tt, 2), data = as.data.frame(training_data))
residuals <- fitModel$residuals
par(mfrow = c(1, 2))
plot(residuals, type="l", main="Residuals of the fitted model")
acf(residuals, main="ACF of Residuals of the fitted model")
auto.arima(residuals,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(residuals,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
arma.model <- arima(residuals, order=c(1,0,3), include.mean = FALSE, method = "ML")
par(mfrow = c(1, 2))
acf(arma.model$residuals, main="ACF of Residuals from the ARMA model")
pacf(arma.model$residuals, lag.max=20,
ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
# QQ plot
qqnorm(arma.model$residuals, main = "QQ-plot of the regression residuals")
qqline(arma.model$residuals, col = "red", lwd = 2)
# Shapiro-Wilks test. Ho is normality
shapiro.test(arma.model$residuals)
#Box-Ljung test
Box.test(arma.model$residuals, lag=20, type="Ljung-Box")
arma.model <- arima(training_data, order=c(1,0,3), include.mean = FALSE, method = "ML")
h = 5
arma.forecast <- predict(arma.model, h)
round(arma.forecast$pred, 3)
round(arma.forecast$se, 3)
lower <- arma.forecast$pred - (1.96 * arma.forecast$se)
upper <- arma.forecast$pred + (1.96 * arma.forecast$se)
msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
# length(arma.forecast$pred)
# forecasted_periods
# forecasted_periods <- c(length(training_data)+1:h)
# par(mfrow = c(1,1))
# plot(as.numeric(training_data), xlim=c(1,length(training_data)+h), main = "Forecasts for the log(GNP) time series, horizon = 5")
# lines(forecasted_periods, as.numeric(arma.forecast$pred), lwd = 2)
# lines(forecasted_periods, as.numeric(lower), lty=2, lwd=2)
# lines(forecasted_periods, as.numeric(upper), lty=2, lwd=2)
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="aic",allowmean = FALSE) # AIC
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="bic",allowmean = FALSE) # BIC
arma.model.2e <- arima(training_data, order=c(1,1,0), include.mean = FALSE, method = "ML")
h = 5
arma.forecast.2e <- predict(arma.model.2e, h)
round(arma.forecast.2e$pred, 3)
round(arma.forecast.2e$se, 3)
lower <- arma.forecast.2e$pred - (1.96 * arma.forecast.2e$se)
upper <- arma.forecast.2e$pred + (1.96 * arma.forecast.2e$se)
msfe <- mean( (arma.forecast.2e$pred - as.numeric(test_data))^2 )
msfe
set.seed(99)
n_steps <- 100
Z_t <- rnorm(n_steps)
t <- seq_len(n_steps)
X_t <- -1 * 0.2 * t + 0.8 * cumsum(Z_t)
par(mfrow = c(2,2))
plot(t, X_t, type = 'l', col = 'blue', xlab = 'Time', ylab = 'X_t',
main = 'Random Walk: X_t = -0.2*t + 0.8* sum(Z_t)')
acf(X_t, main="ACF of Residuals from the ARMA model")
pacf(X_t, lag.max=20, ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
arma.model <- arima(X_t,  order=c(0,1,1),stepwise = FALSE, approximation = FALSE, seasonal = FALSE) #include.drift = TRUE,
arma.model <- arima(X_t,  order=c(0,1,1), seasonal = FALSE) #include.drift = TRUE,
arma.model <- arima(X_t,  order=c(0,1,1)) #include.drift = TRUE,
arma.model
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
auto.arima(X_t, stepwise = FALSE, approximation = FALSE, seasonal = FALSE, lambda = "auto")
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
auto.arima(X_t, stepwise = FALSE, approximation = FALSE, seasonal = FALSE, lambda = 0)
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
arma.model <- auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML", allowdrift=TRUE) #include.drift = TRUE,
arma.model <- auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) #include.drift = TRUE,
arma.model
arma.model
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML", allowdrift=TRUE) #include.drift = TRUE,
arma.model
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML", allowdrift=TRUE) #include.drift = TRUE,
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
ur.gt <- ur.df(X_t, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=0, type='trend')
ur.gt <- ur.df(X_t, lags=0, type='trend')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='trend')
summary(ur.gt)
#install.packages("astsa")
library(astsa)
library(forecast)
library(urca)
gnp_data <- ts(gnp, start = c(1947, 1), end = c(2002, 3) , frequency = 4)
gnp_data = log(gnp_data)
plot(gnp_data, type="l", main="Box-Cox Log-Transform of the GNP data",
ylab = "log(gnp)", xlab = "Quarter")
# Leave out the last 5 observations as test data
training_data <- head(gnp_data, -5)
test_data <- tail(gnp_data, 5)
tt <- seq(1, length(training_data), by=1)
y <- training_data
fitModel <- lm(y ~ poly(tt, 2), data = as.data.frame(training_data))
residuals <- fitModel$residuals
par(mfrow = c(1, 2))
plot(residuals, type="l", main="Residuals of the fitted model")
acf(residuals, main="ACF of Residuals of the fitted model")
auto.arima(residuals,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(residuals,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
arma.model <- arima(residuals, order=c(1,0,3), include.mean = FALSE, method = "ML")
par(mfrow = c(1, 2))
acf(arma.model$residuals, main="ACF of Residuals from the ARMA model")
pacf(arma.model$residuals, lag.max=20,
ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
# QQ plot
qqnorm(arma.model$residuals, main = "QQ-plot of the regression residuals")
qqline(arma.model$residuals, col = "red", lwd = 2)
# Shapiro-Wilks test. Ho is normality
shapiro.test(arma.model$residuals)
#Box-Ljung test
Box.test(arma.model$residuals, lag=20, type="Ljung-Box")
arma.model <- arima(training_data, order=c(1,0,3), include.mean = FALSE, method = "ML")
h = 5
arma.forecast <- predict(arma.model, h)
round(arma.forecast$pred, 3)
round(arma.forecast$se, 3)
lower <- arma.forecast$pred - (1.96 * arma.forecast$se)
upper <- arma.forecast$pred + (1.96 * arma.forecast$se)
msfe <- mean( (arma.forecast$pred - as.numeric(test_data))^2 )
msfe
# length(arma.forecast$pred)
# forecasted_periods
# forecasted_periods <- c(length(training_data)+1:h)
# par(mfrow = c(1,1))
# plot(as.numeric(training_data), xlim=c(1,length(training_data)+h), main = "Forecasts for the log(GNP) time series, horizon = 5")
# lines(forecasted_periods, as.numeric(arma.forecast$pred), lwd = 2)
# lines(forecasted_periods, as.numeric(lower), lty=2, lwd=2)
# lines(forecasted_periods, as.numeric(upper), lty=2, lwd=2)
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="aic",allowmean = FALSE) # AIC
auto.arima(training_data,max.p=10,max.q=10, max.d=2, ic="bic",allowmean = FALSE) # BIC
arma.model.2e <- arima(training_data, order=c(1,1,0), include.mean = FALSE, method = "ML")
h = 5
arma.forecast.2e <- predict(arma.model.2e, h)
round(arma.forecast.2e$pred, 3)
round(arma.forecast.2e$se, 3)
lower <- arma.forecast.2e$pred - (1.96 * arma.forecast.2e$se)
upper <- arma.forecast.2e$pred + (1.96 * arma.forecast.2e$se)
msfe <- mean( (arma.forecast.2e$pred - as.numeric(test_data))^2 )
msfe
set.seed(99)
n_steps <- 100
Z_t <- rnorm(n_steps)
t <- seq_len(n_steps)
X_t <- -1 * 0.2 * t + 0.8 * cumsum(Z_t)
par(mfrow = c(2,2))
plot(t, X_t, type = 'l', col = 'blue', xlab = 'Time', ylab = 'X_t',
main = 'Random Walk: X_t = -0.2*t + 0.8* sum(Z_t)')
acf(X_t, main="ACF of Residuals from the ARMA model")
pacf(X_t, lag.max=20, ylim=c(-1, 1), main = "PACF of Residuals from the ARMA model") # PACF
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="aic", allowdrift=TRUE) # AIC
auto.arima(X_t,max.p=20,max.q=20, max.d=2, ic="bic", allowdrift=TRUE) # BIC
arma.model <- arima(X_t,  order=c(0,1,1), method = "ML") #include.drift = TRUE,
arma.model
ur.gt <- ur.df(X_t, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='drift')
summary(ur.gt)
ur.gt <- ur.df(X_t, lags=1, type='none')
summary(ur.gt)
data(Raotbl3)
attach(Raotbl3)
lc_TS <- ts(lc, start = c(1966, 4), end = c(1991, 2), frequency = 4)
plot(lc_TS, type="l", main="Real consumption exp., U.K., 1966-Q4 to 1991-Q2.",
ylab = "Expenditure", xlab = "Quarter")
ur.gt <- ur.df(lc_TS, lags=3, type='trend')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=3, type='drift')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=3, type='none')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='trend')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='drift')
summary(ur.gt)
ur.gt <- ur.df(lc_TS, lags=2, type='none')
summary(ur.gt)
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
ur.gt <- ur.df(gnp_data, lags=1, type='trend')
summary(ur.gt)
ur.gt <- ur.df(gnp_data, lags=1, type='drift')
summary(ur.gt)
ur.gt <- ur.df(gnp_data, lags=1, type='none')
summary(ur.gt)
auto.arima(gnp_data,max.p=10,max.q=10, max.d=10, ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10, max.d=10, ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowdrift = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="aic",allowmean = FALSE) # AIC
auto.arima(gnp_data,max.p=10,max.q=10,ic="bic",allowmean = FALSE) # BIC
ur.gt <- ur.df(gnp_data, lags=1, type='trend')
summary(ur.gt)
