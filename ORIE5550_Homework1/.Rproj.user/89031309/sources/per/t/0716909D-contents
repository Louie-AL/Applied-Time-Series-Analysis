---
title: "ORIE5550A5_code"
output:
  pdf_document: default
  html_document: default
date: "2024-03-08"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```




```{r}
###############
#
# Problem 1
#
###############


library(astsa)
library(forecast)
#1a)

x1 = 0.7
x2 = -0.5
bottom = 1 + x1**2 + x2**2 + x1**2*x2**2
ma = c(0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5, -0.35) 
ARMAacf(ma = ma, lag.max = 30)

theoacf_1 = x1 * (1 + x2**2)/bottom 
theoacf_11 = x1 * x2 / bottom

 theoacf_12 = (x1**2 * x2 + x2)/bottom 
 theoacf_13 = x1 * x2 / bottom
 
 print(c(theoacf_1, theoacf_11, theoacf_12, theoacf_13))
 
ma_acf <- ARMAacf(ma=c(0.7,rep(0,10),-0.5,0.7*-0.5),lag.max=30,pacf=F)
ma_pacf <- ARMAacf(ma=c(0.7,rep(0,10),-0.5,0.7*-0.5),lag.max=30,pacf=T)

plot(ma_acf, type='h')
plot(ma_pacf, type='h')

#b)

set.seed(99)

ts.e1  <- sarima.sim(ma =0.7, sma = -0.5, S= 12, n =400)
#ts.e1 <- as.numeric(ts.e1)
plot.ts(ts.e1)
acf(ts.e1)
pacf(ts.e1, lag.max = 30)


```

## Including Plots

You can also embed plots, for example:

#To generate time series data of length 300 from the specified model and parameters, and then produce a time plot along with sample ACF and PACF plots, you can use the following R code:

```{r}

#c) fit and forecast

auto.mod <- auto.arima(ts.e1, max.p = 0, max.q = 1, max.d = 1,
                        start.p = 0,
                        max.P = 0, max.Q = 1, max.D = 1,
                        start.P = 0, 
                        allowdrift = FALSE, ic = "aic")

auto.mod

# Therefore, the model is the following form:
#Zt + 0.7461 * Zt-1 - 0.5557 * Zt-12 - 0.4146 * Zt-13
auto.mod$coef[1]

coef1 <- auto.mod$coef[1]
coef2 <- auto.mod$coef[2]

equation <- paste("Zt +", coef1, "* Zt-1 -", coef2, "* Zt-12 -", coef1 * coef2, "* Zt-13")

# Print the equation
print(equation)

fit_model = arima(ts.e1, order = c(0,0,1), seasonal = list(order = c(0,0,1), period = 12))
fit_model
#ts.e1.forecast <- forecast(auto.mod, n.ahead=12) 
ts.e1.forecast <- forecast(fit_model, n.ahead=12) 
plot(ts.e1.forecast)
```

This code will generate time series data from the specified model, produce a time plot of the generated data, and then plot the sample ACF and PACF. Adjust the parameters and lengths as needed for your analysis.

```{r}
#2a)

library(astsa)
data_unemp = ts(unemp)

log_unemp = log(ts(unemp)) # log transformation on the time series


par(mfrow = c(1,2))
plot.ts(data_unemp, main = "GNP without log transformation", xlab = "Time", ylab = "GNP", type = 'l')
plot(log_unemp, main = "GNP with log transformation", xlab = "Time", ylab = "GNP", type = 'l')

train_log_unemp = log_unemp[1:(length(log_unemp)-12)]
test_log_unemp = log_unemp[(length(log_unemp)-11): length(log_unemp)]
time_index <- seq_along(train_log_unemp)



#construction of the time series
t = seq(1, 360)
t_2 = t ** 2
cos1 = cos(2*pi*t/12)
sin1 = sin(2*pi*t/12)
cos2 = cos(2*pi*t/6)
sin2 = sin(2*pi*t/6)
cos3 = cos(2*pi*t/4)
sin3 = sin(2*pi*t/4)

# least squares
model <- lm(train_log_unemp ~ t + t_2 + cos1 + sin1 + cos2 + sin2 + cos3 + sin3)
summary(model)

#plot(t, train_log_unemp, main = "Fitted vs Actual", xlab = "Time", ylab = "unemployement", type = 'l') #Fitted vs Actual
#lines(t, fitted(model), col = "red", type = "l")

R = residuals(model)
plot.ts(R)
acf(R) # correlogram of the residual errors

summary(model)


auto.mod <- auto.arima(residuals(model), max.p = 5, max.q = 5, max.d = 1,
                        start.p = 0, start.q = 0,
                        max.P = 5, max.Q = 5, max.D = 1,
                        start.P = 0, start.Q = 0,
                        allowdrift = FALSE, ic = "aic")

auto.mod 
# Forecast residuals 12 steps ahead
forecast_residuals <- predict(auto.mod$residuals, h=12)

tt = seq(361,372) # declare new t values for prediction values
tt_2 = tt ** 2
cos1 = cos(2*pi*tt/12)
sin1 = sin(2*pi*tt/12)
cos2 = cos(2*pi*tt/6)
sin2 = sin(2*pi*tt/6)
cos3 = cos(2*pi*tt/4)
sin3 = sin(2*pi*tt/4)
new_data = data.frame(tt, t_2, cos1, sin1, cos2, sin2, cos3, sin3)
trend_prediction <- predict(model, new_data)


trend.predict <- model$coefficients[1] + 
                  model$coefficients[2] * tt + 
                  model$coefficients[3] * tt_2 +
                  model$coefficients[4] * cos1+ 
                  model$coefficients[5] * sin1 + 
                  model$coefficients[6] * cos2 +
                  model$coefficients[7] * sin2+ 
                  model$coefficients[8] * cos3 + 
                  model$coefficients[9] * sin3 
              

# Combine SARIMA forecast with trend and seasonal component
forecast_combined <- exp(forecast_residuals$mean + trend.predict )
## TODO forecast values are inf.

# Plot original series with fitted values and predictions
plot(unemp, type="l", col="blue",
     xlab="Time", ylab="Unemployment", main="12-Step-Ahead Predictions of Unemployment")
#lines(time_index, fitted_values, col="red")
lines( forecast_combined, col="green")
legend("topleft", legend=c("Original Series", "Predictions"),
       col=c("blue", "green"), lty=1)
```
```{r}
#2b)
auto.ts2 <- auto.arima(log_unemp, max.p = 5, max.q = 5, max.d = 2, start.p = 0, start.q = 0,
            max.P = 5, max.Q = 5, max.D = 2,
            start.P = 0, start.Q = 0,
            allowdrift = FALSE, ic = "aic")

predicted1 = predict(auto.ts2, 12)
forecast_residuals <- predict(auto.ts2$residuals, h=12)
predictions1 = exp(predicted1$pred + forecast_residuals$mean)

plot(ts(unemp), col = 'blue')
lines(predictions1, col = "red")
legend("topleft", legend = c("Series 1", "Series 2"), col = c("blue", "red"),
 lty = 1)


#2

MSFE = mean((forecast_combined-test_log_unemp)**2) 
MSFE1 = mean((predicted1$pred - test_log_unemp)**2)
print(c(MSFE, MSFE1)) #error in MFE

```


```{r}

#Problem #3
#3a)
library(perARMA)

set.seed(1)
s <- 24
TT <- 1000
p <- 2
a <- matrix(0,s,p)
a[1,1] <- 0.5
a[2,2] <- 0.4
phia <- ab2phth(a)
phi0 <- phia$phi
phi0 <- as.matrix(phi0)
del0 <- matrix(1,s,1)
PAR2 <- makepar(TT,phi0,del0)
par2 <- PAR2$y

plot(ts(par2))

for (i in seq(1: 24)){
print(paste('phi1,{i} = {phi0[i, 1]} and phi2,{i} = {phi0[i, 2]} and
sigma_2,{i} = {del0[i]}')) }


periodic_mean =
  permest(t(par2), T_t =24, alpha =0.05, missval = NaN, datastr = 'par2')$pmean
periodic_mean

#3b)
par(mfrow = c(1,2))
acf(par2)
pacf(par2)

arima_model <- auto.arima(par2, max.p = 2, max.q = 2, max.d = 2,
                        start.p = 0, start.q = 0,
                        max.P = 2, max.Q = 2, max.D = 2,
                        start.P = 0, start.Q = 0,
                        allowdrift = FALSE, ic = "aic")

summary(arima_model) #model suggested AR(1) with zero mean


#3c)

library(perARMA)

# Fit PAR(2) model
par_fit <- perARMA::perYW(par2, 24, 2, NaN)

# Plot estimated parameters

plot(phi0[,1], type = "l", ylim = c(0, 1), xlab = "k", ylab = expression(hat(phi)[j,k]), 
     main = expression(paste(hat(phi)[j,k], " for j = 1")))
lines(par_fit$phi[,1], col ="blue")
plot(phi0[,2], type = "l", xlab = "k", ylab = expression(hat(phi)[j,k]), 
     main = expression(paste(hat(phi)[j,k], " for j = 2")))
lines(par_fit$phi[,2], col ="blue")

```


```{r}

#Problem 4
library(fpp3)

data_bc = bank_calls

rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)

data(bank_calls)

# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]

TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT

ts <- vector("numeric",169)
for (k in 1:169){
  
  if (k %% 7 == 0){
    ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
  }else{
    ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
  }
}

# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)

# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)

plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")

ts168_test_demean <- ts168_test - mean(ts168_test)


# calculating and removing weekly means
ts168_train2 = ts168_train - mean(ts168_train) #remove daily mean 

ts168_train_dmean_perm = permest(t(ts168_train2),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train2') #periodic estimator error
ts168_train_dmean_perm$xd

#series where mean and seasonality are removed
ts168_train3 <-ts168_train_dmean_perm$xd

plot.ts(ts168_train3)
par(mfrow =c(1,2))

acf(ts168_train3, max = 50)
pacf(ts168_train3, max = 50)


#b)
# PAR fitting:




ts168_train3a <- ts(ts168_train3,start=1,end=41,frequency=24) # 984/24 = 41
detcomp <- list(regular=c(0,0,0), seasonal=c(1,0), regvar=0)

# lag section:
aic <- bic <- Fnextp <- Fpval <- rep(NA, 4)
for(p in 1:4){
  lmpar <- fit.ar.par(wts=ts168_train3a, type="PAR", detcomp=detcomp, p=p)
  aic[p] <- AIC(lmpar@lm.par, k=2)
  bic[p] <- BIC(lmpar@lm.par)
  # H_0: phi_{p+1,k}=0, k=1,...,s
  Fout <- Fnextp.test(wts=ts168_train3a, detcomp=detcomp, p=p, type="PAR")
  Fnextp[p] <- Fout@Fstat
  Fpval[p] <- Fout@pval
}
which.min(aic) #4
which.min(bic) # 4


# Followed by aic, p = 1
p_par <- 4
out.par <- fit.ar.par(wts=ts168_train3a, type="PAR", detcomp=detcomp, p=p_par)

par.mod <- slot(out.par,"lm.par")
plot(par.mod$coefficients[1:(24*p_par)],type="l",xlab="period")
# SAR fitting:
sarma_model <- auto.arima(ts168_train3, max.p = 5, max.q = 5, max.d = 2,
                        start.p = 0, start.q = 0,
                        max.P = 5, max.Q = 5, max.D = 2,
                        start.P = 0, start.Q = 0,
                        allowdrift = FALSE, seasonal = TRUE, stepwise = FALSE)

summary(sarma_model) 

par.mod <- slot(out.par,"lm.par")
plot.ts(ts168_train3, col = 'red') 
lines(sarma_model$fitted, col = 'green') 
lines(par.mod$fitted, col = 'blue')
legend("topleft", legend = c("Train_3", "Sarma", "Par"), col = c("red", "green", "blue"), lty = 1)
# In-sample performance: compute the MSE for both models

MSFE = mean((sarma_model$fitted - ts168_train3)**2)

#TODO fix code error
#MSFE1 = mean((par.mod$fitted - ts168_train3)**2)
## Warning in par.mod$fitted - ts168_train3: longer object length is not a ## multiple of shorter object length
#print(c(MSFE, MSFE1))
ts168_test_demean

par.pred = predictperYW(ts168_train3, 24, 2, NaN, (162+6))$new

# Out-of-sample performance (prediction):


sar.pred <- as.vector(forecast(sarma_model,7)$mean)

final_pred1 = ts168_train_dmean_perm$pmean + par.pred 
final_pred2 = ts168_train_dmean_perm$pmean + sar.pred
MSFE = mean((final_pred1 - ts168_test_demean)**2) 
MSFE1 = mean((final_pred2 - ts168_test_demean)**2)
print(c(MSFE, MSFE1))
#Based on the result the par model works better


```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
