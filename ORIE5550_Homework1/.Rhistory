Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Heston Model Parameters
S0 <- tail(data_train$Adj.Close, 1)  # Last observed VIX value
theta <- 0.04  # Long-run variance
nu <- 0.04  # Mean reversion level (initial estimate)
sigma_v <- 0.2  # Volatility of volatility
rho <- -0.5  # Correlation between the two Brownian motions
mu <- 0.01  # Drift for VIX
# Simulation Parameters
n_simulations <- 1000  # Number of simulations
n_steps <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))  # Forecast horizon
# Prepare to store results
simulated_prices <- matrix(0, nrow = n_steps, ncol = n_simulations)
simulated_variances <- matrix(0, nrow = n_steps, ncol = n_simulations)
# Run Monte Carlo simulations
for (j in 1:n_simulations) {
S <- numeric(n_steps)
V <- numeric(n_steps)
S[1] <- S0
V[1] <- tail(data_train$Adj.Close, 1)^2  # Initialize with last observed variance
for (t in 2:n_steps) {
dW_S <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for price
dW_V <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for volatility
# Apply correlation
dW_V <- rho * dW_S + sqrt(1 - rho^2) * dW_V
# Heston dynamics
V[t] <- V[t-1] + theta * (nu - V[t-1]) + sigma_v * sqrt(V[t-1]) * dW_V
V[t] <- max(V[t], 0)  # Prevent negative variance
S[t] <- S[t-1] * exp((mu - 0.5 * V[t-1]) + sqrt(V[t-1]) * dW_S)
}
simulated_prices[, j] <- S
simulated_variances[, j] <- V
}
# Forecasting VIX levels
forecasted_mean <- apply(simulated_prices, 1, mean)
forecasted_upper <- apply(simulated_prices, 1, quantile, probs = 0.975)
forecasted_lower <- apply(simulated_prices, 1, quantile, probs = 0.025)
# Create a data frame for plotting
forecasted_data <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Extract actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Calculate the maximum values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_mean, na.rm = TRUE)
# Print the maximum values
print(paste("Max Actual VIX:", max_actual))
print(paste("Max Forecasted VIX:", max_forecasted))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Heston Model Parameters
S0 <- tail(data_train$Adj.Close, 1)  # Last observed VIX value
theta <- 0.05  # Long-run variance
nu <- 0.04  # Mean reversion level (initial estimate)
sigma_v <- 0.2  # Volatility of volatility
rho <- -0.5  # Correlation between the two Brownian motions
mu <- 0.01  # Drift for VIX
# Simulation Parameters
n_simulations <- 1000  # Number of simulations
n_steps <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))  # Forecast horizon
# Prepare to store results
simulated_prices <- matrix(0, nrow = n_steps, ncol = n_simulations)
simulated_variances <- matrix(0, nrow = n_steps, ncol = n_simulations)
# Run Monte Carlo simulations
for (j in 1:n_simulations) {
S <- numeric(n_steps)
V <- numeric(n_steps)
S[1] <- S0
V[1] <- tail(data_train$Adj.Close, 1)^2  # Initialize with last observed variance
for (t in 2:n_steps) {
dW_S <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for price
dW_V <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for volatility
# Apply correlation
dW_V <- rho * dW_S + sqrt(1 - rho^2) * dW_V
# Heston dynamics
V[t] <- V[t-1] + theta * (nu - V[t-1]) + sigma_v * sqrt(V[t-1]) * dW_V
V[t] <- max(V[t], 0)  # Prevent negative variance
S[t] <- S[t-1] * exp((mu - 0.5 * V[t-1]) + sqrt(V[t-1]) * dW_S)
}
simulated_prices[, j] <- S
simulated_variances[, j] <- V
}
# Forecasting VIX levels
forecasted_mean <- apply(simulated_prices, 1, mean)
forecasted_upper <- apply(simulated_prices, 1, quantile, probs = 0.975)
forecasted_lower <- apply(simulated_prices, 1, quantile, probs = 0.025)
# Create a data frame for plotting
forecasted_data <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Extract actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Calculate the maximum values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_mean, na.rm = TRUE)
# Print the maximum values
print(paste("Max Actual VIX:", max_actual))
print(paste("Max Forecasted VIX:", max_forecasted))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Heston Model Parameters
S0 <- tail(data_train$Adj.Close, 1)  # Last observed VIX value
theta <- 0.2  # Long-run variance
nu <- 0.04  # Mean reversion level (initial estimate)
sigma_v <- 0.2  # Volatility of volatility
rho <- -0.5  # Correlation between the two Brownian motions
mu <- 0.01  # Drift for VIX
# Simulation Parameters
n_simulations <- 1000  # Number of simulations
n_steps <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))  # Forecast horizon
# Prepare to store results
simulated_prices <- matrix(0, nrow = n_steps, ncol = n_simulations)
simulated_variances <- matrix(0, nrow = n_steps, ncol = n_simulations)
# Run Monte Carlo simulations
for (j in 1:n_simulations) {
S <- numeric(n_steps)
V <- numeric(n_steps)
S[1] <- S0
V[1] <- tail(data_train$Adj.Close, 1)^2  # Initialize with last observed variance
for (t in 2:n_steps) {
dW_S <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for price
dW_V <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for volatility
# Apply correlation
dW_V <- rho * dW_S + sqrt(1 - rho^2) * dW_V
# Heston dynamics
V[t] <- V[t-1] + theta * (nu - V[t-1]) + sigma_v * sqrt(V[t-1]) * dW_V
V[t] <- max(V[t], 0)  # Prevent negative variance
S[t] <- S[t-1] * exp((mu - 0.5 * V[t-1]) + sqrt(V[t-1]) * dW_S)
}
simulated_prices[, j] <- S
simulated_variances[, j] <- V
}
# Forecasting VIX levels
forecasted_mean <- apply(simulated_prices, 1, mean)
forecasted_upper <- apply(simulated_prices, 1, quantile, probs = 0.975)
forecasted_lower <- apply(simulated_prices, 1, quantile, probs = 0.025)
# Create a data frame for plotting
forecasted_data <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Extract actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Calculate the maximum values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_mean, na.rm = TRUE)
# Print the maximum values
print(paste("Max Actual VIX:", max_actual))
print(paste("Max Forecasted VIX:", max_forecasted))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Heston Model Parameters
S0 <- tail(data_train$Adj.Close, 1)  # Last observed VIX value
theta <- 0.04  # Long-run variance
nu <- 0.04  # Mean reversion level (initial estimate)
sigma_v <- 0.2  # Volatility of volatility
rho <- -0.5  # Correlation between the two Brownian motions
mu <- 0.1  # Drift for VIX
# Simulation Parameters
n_simulations <- 1000  # Number of simulations
n_steps <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))  # Forecast horizon
# Prepare to store results
simulated_prices <- matrix(0, nrow = n_steps, ncol = n_simulations)
simulated_variances <- matrix(0, nrow = n_steps, ncol = n_simulations)
# Run Monte Carlo simulations
for (j in 1:n_simulations) {
S <- numeric(n_steps)
V <- numeric(n_steps)
S[1] <- S0
V[1] <- tail(data_train$Adj.Close, 1)^2  # Initialize with last observed variance
for (t in 2:n_steps) {
dW_S <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for price
dW_V <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for volatility
# Apply correlation
dW_V <- rho * dW_S + sqrt(1 - rho^2) * dW_V
# Heston dynamics
V[t] <- V[t-1] + theta * (nu - V[t-1]) + sigma_v * sqrt(V[t-1]) * dW_V
V[t] <- max(V[t], 0)  # Prevent negative variance
S[t] <- S[t-1] * exp((mu - 0.5 * V[t-1]) + sqrt(V[t-1]) * dW_S)
}
simulated_prices[, j] <- S
simulated_variances[, j] <- V
}
# Forecasting VIX levels
forecasted_mean <- apply(simulated_prices, 1, mean)
forecasted_upper <- apply(simulated_prices, 1, quantile, probs = 0.975)
forecasted_lower <- apply(simulated_prices, 1, quantile, probs = 0.025)
# Create a data frame for plotting
forecasted_data <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Extract actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Calculate the maximum values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_mean, na.rm = TRUE)
# Print the maximum values
print(paste("Max Actual VIX:", max_actual))
print(paste("Max Forecasted VIX:", max_forecasted))
library(fGarch)
library(tseries)
library(forecast)
library(rugarch)
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
fit1 <- auto.arima(data_train$Adj.Close, max.p=5, max.q=5, allowdrift=TRUE, allowmean=TRUE, ic="aic")
fit1
forecast_horizon <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))
forecasted_values <- forecast(fit1, h=forecast_horizon)
plot(forecasted_values)
print(forecasted_values)
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
forecasted_values <- forecasted_values$mean[1:length(data_test$Adj.Close)]
rmse <- sqrt(mean((forecasted_values - data_test$Adj.Close)^2))
print(paste("RMSE:", rmse))
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_values, na.rm = TRUE)
print(paste("Max Actual:", max_actual))
print(paste("Max Forecasted:", max_forecasted))
library(rugarch)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit11 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit11
forecast_horizon <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))
forecasted_values <- forecast(fit11, h=forecast_horizon)
fit11
library(rugarch)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit11 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit11
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit1 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit1
forecast_horizon <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))
forecasted_values <- forecast(fit1, h=forecast_horizon)
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit1 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit1
spec <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
spec <- ugarchspec(variance.model = list(model = "apARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
spec <- ugarchspec(variance.model = list(model = "fGARCH", submodel = "TGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Function to fit GARCH models and evaluate performance
evaluate_garch_model <- function(model_type) {
# Specify GARCH model based on the type
if (model_type == "sGARCH") {
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
} else if (model_type == "eGARCH") {
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
} else if (model_type == "gjrGARCH") {
spec <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
} else if (model_type == "apARCH") {
spec <- ugarchspec(variance.model = list(model = "apARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
} else if (model_type == "tgARCH") {
spec <- ugarchspec(variance.model = list(model = "fGARCH", submodel = "TGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)))
} else {
stop("Invalid model type")
}
# Fit the model
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
# Forecast horizon
forecast_horizon <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))
forecasted_values <- ugarchforecast(fit, n.ahead = forecast_horizon)
# Plot the forecast
plot(forecasted_values, main = paste("Forecasted VIX using", model_type))
# Display forecasted values
print(forecasted_values)
# Filter actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Extract forecasted mean values for comparison
forecasted_values_mean <- as.numeric(fitted(forecasted_values))
# Ensure the lengths match for RMSE calculation
forecasted_values_mean <- forecasted_values_mean[1:length(data_test$Adj.Close)]
# Calculate RMSE
rmse <- sqrt(mean((forecasted_values_mean - data_test$Adj.Close)^2))
print(paste("RMSE for", model_type, ":", rmse))
# Extract maximum values from both test data and forecasted values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_values_mean, na.rm = TRUE)
print(paste("Max Actual for", model_type, ":", max_actual))
print(paste("Max Forecasted for", model_type, ":", max_forecasted))
}
# Evaluate each GARCH model
evaluate_garch_model("sGARCH")
evaluate_garch_model("eGARCH")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alons/OneDrive - Cornell University/Cornell University/Fall 2024/ORIE 5254")
# Load and prepare the data
data1 <- read.csv("VIX.csv")
data1$Date <- as.Date(data1$Date, format="%Y-%m-%d")
# Filter data up to December 31, 2022, for training
data_train <- subset(data1, Date <= as.Date("2022-12-31"))
# Heston Model Parameters
S0 <- tail(data_train$Adj.Close, 1)  # Last observed VIX value
theta <- 0.04  # Long-run variance
nu <- 0.04  # Mean reversion level (initial estimate)
sigma_v <- 0.2  # Volatility of volatility
rho <- -0.5  # Correlation between the two Brownian motions
mu <- 0.01  # Drift for VIX
# Simulation Parameters
n_simulations <- 1000  # Number of simulations
n_steps <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))  # Forecast horizon
# Prepare to store results
simulated_prices <- matrix(0, nrow = n_steps, ncol = n_simulations)
simulated_variances <- matrix(0, nrow = n_steps, ncol = n_simulations)
# Run Monte Carlo simulations
for (j in 1:n_simulations) {
S <- numeric(n_steps)
V <- numeric(n_steps)
S[1] <- S0
V[1] <- tail(data_train$Adj.Close, 1)^2  # Initialize with last observed variance
for (t in 2:n_steps) {
dW_S <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for price
dW_V <- rnorm(1, mean = 0, sd = 1)  # Brownian motion for volatility
# Apply correlation
dW_V <- rho * dW_S + sqrt(1 - rho^2) * dW_V
# Heston dynamics
V[t] <- V[t-1] + theta * (nu - V[t-1]) + sigma_v * sqrt(V[t-1]) * dW_V
V[t] <- max(V[t], 0)  # Prevent negative variance
S[t] <- S[t-1] * exp((mu - 0.5 * V[t-1]) + sqrt(V[t-1]) * dW_S)
}
simulated_prices[, j] <- S
simulated_variances[, j] <- V
}
# Forecasting VIX levels
forecasted_mean <- apply(simulated_prices, 1, mean)
forecasted_upper <- apply(simulated_prices, 1, quantile, probs = 0.975)
forecasted_lower <- apply(simulated_prices, 1, quantile, probs = 0.025)
# Create a data frame for plotting
forecasted_data <- data.frame(
Date = seq(as.Date("2023-01-01"), as.Date("2024-10-25"), by = "days"),
Mean = forecasted_mean,
Upper = forecasted_upper,
Lower = forecasted_lower
)
# Plot the forecasted values
ggplot() +
geom_line(data = forecasted_data, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = forecasted_data, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Forecasted VIX Levels using Heston Model",
x = "Date", y = "VIX Level") +
theme_minimal()
# Print the last forecasted values
print(tail(forecasted_data))
# Extract actual values for comparison
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
# Calculate the maximum values
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_mean, na.rm = TRUE)
# Print the maximum values
print(paste("Max Actual VIX:", max_actual))
print(paste("Max Forecasted VIX:", max_forecasted))
fit1 <- auto.arima(data_train$Adj.Close, max.p=5, max.q=5, allowdrift=TRUE, allowmean=TRUE, ic="aic")
fit1
forecast_horizon <- as.numeric(as.Date("2024-10-25") - as.Date("2022-12-31"))
forecasted_values <- forecast(fit1, h=forecast_horizon)
plot(forecasted_values)
print(forecasted_values)
data_test <- subset(data1, Date > as.Date("2022-12-31") & Date <= as.Date("2024-10-25"))
forecasted_values <- forecasted_values$mean[1:length(data_test$Adj.Close)]
rmse <- sqrt(mean((forecasted_values - data_test$Adj.Close)^2))
print(paste("RMSE:", rmse))
max_actual <- max(data_test$Adj.Close, na.rm = TRUE)
max_forecasted <- max(forecasted_values, na.rm = TRUE)
print(paste("Max Actual:", max_actual))
print(paste("Max Forecasted:", max_forecasted))
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(1, 1)))
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(1, 1)))
fit1 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit1
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(4, 2)))
fit1 <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit1
spec <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
spec <- ugarchspec(variance.model = list(model = "apARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
spec <- ugarchspec(variance.model = list(model = "fGARCH", submodel = "TGARCH", garchOrder = c(4,1,2)),
mean.model = list(armaOrder = c(1, 1)))
fit <- ugarchfit(spec = spec, data = data_train$Adj.Close)
fit
