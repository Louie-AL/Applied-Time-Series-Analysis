a[2,2] <- 0.4
phia <- ab2phth(a)
phi0 <- phia$phi
phi0 <- as.matrix(phi0)
del0 <- matrix(1,s,1)
PAR2 <- makepar(TT,phi0,del0)
par2 <- PAR2$y
plot(ts(par2))
set.seed(1)
s <- 24
TT <- 1000
p <- 2
a <- matrix(0,s,p)
a[1,1] <- 0.5
a[2,2] <- 0.4
phia <- ab2phth(a)
phi0 <- phia$phi
phi0 <- as.matrix(phi0)
del0 <- matrix(1,s,1)
PAR2 <- makepar(TT,phi0,del0)
par2 <- PAR2$y
plot(ts(par2))
par(mfrow=c(1,2))
acf(par2,lag.max=20)
pacf(par2,lag.max=20)
AR_model <- auto.arima(par2, max.p = 5, max.q = 5, max.d = 2,
start.p = 0, start.q = 0,
max.P = 5, max.Q = 5, max.D = 2,
start.P = 0, start.Q = 0,
allowmean = FALSE, stationary = "TRUE",
ic = "aic")
summary(AR_model)
phi_1 = AR_model$coef[1]
phi_1
par(mfrow=c(1,2))
acf(par2,lag.max=20)
pacf(par2,lag.max=20)
AR_model <- auto.arima(par2, max.p = 5, max.q = 5, max.d = 2,
start.p = 0, start.q = 0,
max.P = 5, max.Q = 5, max.D = 2,
start.P = 0, start.Q = 0,
allowmean = FALSE, stationary = "TRUE",
ic = "aic")
summary(AR_model)
phi_1 = AR_model$coef[1]
out.par<-perARMA::perYW(par2,24,2,NaN)
plot.new()
plot(out.par$phi[,1], type = 'b', col = 'blue', xlab = 'k', ylab = 'Value', main = expression(hat(phi[1,k]) * " and " * phi[1,k] * " for k = 1,...,24"))
lines(phi0[,1], col = 'red', type = 'b')
plot(out.par$phi[,2], type = 'b', col = 'blue', xlab = 'k', ylab = 'Value', main = expression(hat(phi[2,k]) * " and " * phi[2,k] * " for k = 1,...,24"))
lines(phi0[,2], col = 'red', type = 'b')
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls)
# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]
TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT
ts <- vector("numeric",169)
for (k in 1:169){
if (k %% 7 == 0){
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
}else{
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
}
}
# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)
plot.ts(ts168)
# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)
plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")
ts168_test_demean <- ts168_test - mean(ts168_test)
library(fpp3)
#Weekly means
weekly_mean<-c(mean(ts168_train[1:7]),diff(cumsum(ts168_train)[seq(7,161,7)]/7))
#Demean the series
ts168_train2 <- ts168_train - rep(weekly_mean,each=7)
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
par(mfrow=c(1,3))
plot.ts(ts168_train3)
acf(ts168_train3,lag.max=50)
pacf(ts168_train3,lag.max=50)
library(fpp3)
#Weekly means
weekly_mean<-c(mean(ts168_train[1:7]),diff(cumsum(ts168_train)[seq(7,161,7)]/7))
#Demean the series
ts168_train2 <- ts168_train - rep(weekly_mean,each=7)
ts168_train2
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train_perm
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls)
# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]
TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT
ts <- vector("numeric",169)
for (k in 1:169){
if (k %% 7 == 0){
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
}else{
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
}
}
# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)
plot.ts(ts168)
# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)
plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")
ts168_test_demean <- ts168_test - mean(ts168_test)
bank_calls
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls)
data(bank_calls)
bank_calls
bank_calls
bank_calls
bank_calls[-1]
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls[,-1])
# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]
TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT
ts <- vector("numeric",169)
for (k in 1:169){
if (k %% 7 == 0){
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
}else{
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
}
}
# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)
plot.ts(ts168)
# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)
plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")
ts168_test_demean <- ts168_test - mean(ts168_test)
bank_calls[,-1]
bank_calls[-1,1]
bank_calls[-1:]
TT <- length(bank_calls$Calls)
data(bank_calls)
TT
TT <- length(bank_calls$Calls)
TT <- length(bank_calls$Calls)
TT
data(bank_calls[((169-1)*24+1):(169*24+1)])
bank_calls[((169-1)*24+1):(169*24+1)]
bank_calls[((168-1)*24+1):(168*24+1)]
data(bank_calls)
bank_calls[-TT:]
bank_calls[-TT]
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls)
# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]
TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT
ts <- vector("numeric",169)
for (k in 1:169){
if (k %% 7 == 0){
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
}else{
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
}
}
# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)
plot.ts(ts168)
# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)
plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")
ts168_test_demean <- ts168_test - mean(ts168_test)
ts168
mean(ts168_train[1:35])
seq(35,140,35)
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/5),mean(ts168_train[1:35]))
weekly_mean
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/35),mean(ts168_train[1:35]))
weekly_mean
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/35),mean(ts168_train[140:161]))
weekly_mean
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/35),mean(ts168_train[141:161]))
weekly_mean
#Demean the series
ts168_train2 <- ts168_train - rep(weekly_mean,each=35)
rm(list=ls())
library(fpp3)
library(perARMA)
library(partsm)
data(bank_calls)
# bank_calls$DateTime[1:24]
# bank_calls$DateTime[((7-1)*24+1):(7*24)]
# bank_calls$DateTime[c(7*24+1,7*24+2,7*24+3)]
TT <- length(bank_calls$Calls)
floor(TT/169)
floor(TT/169)*169 - TT
ts <- vector("numeric",169)
for (k in 1:169){
if (k %% 7 == 0){
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24+1)])
}else{
ts[k] <- sum(bank_calls$Calls[((k-1)*24+1):(k*24)])
}
}
# 168 = 24*7
ts168 <- log(ts[1:168])
ts168 <- ts(ts168,start=c(1,1),end=c(24,7),frequency=7)
plot.ts(ts168)
# Hold out the last 7 observations
ts168_train <- ts(ts168[-c(162:168)],start=c(1,1),end=c(23,7),frequency=7)
ts168_test <- ts(ts168[c(162:168)],start=c(24,1),end=c(24,7),frequency=7)
plot.ts(ts168)
lines(ts168_train,col="red")
lines(ts168_test,col="blue")
ts168_test_demean <- ts168_test - mean(ts168_test)
ts168_train
rep(weekly_mean,each=35)
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/35),mean(ts168_train[141:161]))
rep(weekly_mean,each=35)
ts168_train
rep(weekly_mean,each=35)
head(rep(weekly_mean,each=35),161)
#Demean the series
ts168_train2 <- ts168_train - head(rep(weekly_mean,each=35),161)
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train
rep(ts168_train_perm$pmean,7)
ts168_train_perm <-permest(t(ts168_train),T_t=35,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
rep(ts168_train_perm$pmean,7)
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train_perm <-permest(t(ts168_train),T_t=24,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train3
ts168_train_perm
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train_perm <-permest(t(ts168_train),T_t=24,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train_perm
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train_perm
ts168_train
ts168_train
ts168_train
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train
rep(ts168_train_perm$pmean,35)
ts168_train_perm <-permest(t(ts168_train),T_t=24,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train2
ts168_train_perm <-permest(t(ts168_train),T_t=35,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train_perm
ts168_train_perm <-permest(t(ts168_train),T_t=35,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,23)
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,7)
ts168_train
rep(ts168_train_perm$pmean,24)
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,23)
ts168_train
ts168_train
rep(ts168_train_perm$pmean,23)
ts168_train
rep(ts168_train_perm$pmean,23)
ts168_train
rep(ts168_train_perm$pmean,7)
ts168_train
rep(ts168_train_perm$pmean,35)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,23)
ts168_train
rep(ts168_train_perm$pmean,23)
library(fpp3)
#Weekly means
weekly_mean<-c(mean(ts168_train[1:35]),diff(cumsum(ts168_train)[seq(35,140,35)]/35),mean(ts168_train[141:161]))
#Demean the series
ts168_train2 <- ts168_train - head(rep(weekly_mean,each=35),161)
#calculating and removing seasonal/periodic means
ts168_train<-as.numeric(ts168_train)
ts168_train_perm <-permest(t(ts168_train),T_t=7,alpha=0.05,missval=NaN,datastr='ts168_train')
ts168_train3<-ts168_train-rep(ts168_train_perm$pmean,23)
par(mfrow=c(1,3))
plot.ts(ts168_train3)
acf(ts168_train3,lag.max=50)
pacf(ts168_train3,lag.max=50)
library(partsm)
detcomp<-list(regular=c(0,0,0),seasonal=c(1,0),regvar=0)
#lag section:
aic<-bic<-Fnextp<-Fpval<-rep(NA,10)
for(p in 1:10){
lmpar<-fit.ar.par(wts=ts168_train3,type="PAR",detcomp=detcomp,p=p)
aic[p]<-AIC(lmpar@lm.par,k=2)
bic[p]<-BIC(lmpar@lm.par)
#H_0:phi_{p+1,k}=0,k=1,...,s
Fout<-Fnextp.test(wts=ts168_train3,detcomp=detcomp,p=p,type="PAR")
Fnextp[p] <-Fout@Fstat
Fpval[p]<-Fout@pval
}
which.min(aic)
which.min(bic)
p_par <- 7
out.par<-fit.ar.par(wts=ts168_train3,type="PAR",detcomp=detcomp,p=p_par)
summary(out.par)
# SARMA Model
# seasonality 7
ts168_train3 <- ts(ts168_train3, frequency=7)
# only allow p and P lags
SARMA_q4 <- auto.arima(ts168_train3, max.p = 10, max.q = 0, max.d = 0,
start.p = 0, start.q = 0,
max.P = 10, max.Q = 0, max.D = 0,
start.P = 0, start.Q = 0,
allowdrift = FALSE, ic = "aic")
summary(SARMA_q4)
library(partsm)
detcomp<-list(regular=c(0,0,0),seasonal=c(1,0),regvar=0)
#lag section:
aic<-bic<-Fnextp<-Fpval<-rep(NA,10)
for(p in 1:10){
lmpar<-fit.ar.par(wts=ts168_train3,type="PAR",detcomp=detcomp,p=p)
aic[p]<-AIC(lmpar@lm.par,k=2)
bic[p]<-BIC(lmpar@lm.par)
#H_0:phi_{p+1,k}=0,k=1,...,s
Fout<-Fnextp.test(wts=ts168_train3,detcomp=detcomp,p=p,type="PAR")
Fnextp[p] <-Fout@Fstat
Fpval[p]<-Fout@pval
}
which.min(aic)
which.min(bic)
p_par <- 8 # selected lag order
out.par<-fit.ar.par(wts=ts168_train3,type="PAR",detcomp=detcomp,p=p_par)
summary(out.par)
# SARMA Model
# seasonality 7
ts168_train3 <- ts(ts168_train3, frequency=7)
# only allow p and P lags
SARMA_q4 <- auto.arima(ts168_train3, max.p = 10, max.q = 0, max.d = 0,
start.p = 0, start.q = 0,
max.P = 10, max.Q = 0, max.D = 0,
start.P = 0, start.Q = 0,
allowdrift = FALSE, ic = "aic")
summary(SARMA_q4)
par.mod<-slot(out.par,"lm.par")
df1 <- data.frame(train_compare = ts168_train3, timestamp = seq(1,161,1))
df2 <- data.frame(par_fitted = par.mod$fitted.values, timestamp = seq(8,161,1))
par.mod$fitted.values
par.mod<-slot(out.par,"lm.par")
df1 <- data.frame(train_compare = ts168_train3, timestamp = seq(1,161,1))
df2 <- data.frame(par_fitted = par.mod$fitted.values, timestamp = seq(9,161,1))
df3 <- data.frame(sarma_fitted = SARMA_q4$fitted, timestamp = seq(1,161,1))
merged_df <- merge(df1, df2, by = "timestamp", all = TRUE)
merged_df <- merge(merged_df, df3, by = "timestamp", all = TRUE)
ggplot(merged_df, aes(x = timestamp)) +
geom_line(aes(y = train_compare, color = "Training Data")) +
geom_line(aes(y = par_fitted, color = "Par Fit")) +
geom_line(aes(y = sarma_fitted, color = "SARMA Fit")) +
labs(x = "Timestamp", y = "Value", color = "Data Type") +
ggtitle("Original, Fitted and Forecasted TS") +
theme_minimal()
# Mean squared Residuals
residuals_par <- par.mod$residuals
residuals_mse_par <- mean((residuals_par)^2)
residuals_mse_par
residuals_sarma <- SARMA_q4$residuals
residuals_mse_sarma <- mean((residuals_sarma)^2)
residuals_mse_sarma
par.pred<-predictperYW(ts168_train_perm$xd,7,1,NaN,(161+7))$new
h <- 7
SARMA_q4.forecast <- forecast(SARMA_q4, h)
plot(SARMA_q4.forecast)
par_demean_forecast = (ts168_train_perm$pmean + as.numeric(par.pred))
MSFE_par_demean = mean((par_demean_forecast - ts168_test_demean)^2)
MSFE_par_demean
sarma_demean_forecast = (ts168_train_perm$pmean + as.numeric(SARMA_q4.forecast$mean))
MSFE_sarma_demean = mean((sarma_demean_forecast - ts168_test_demean)^2)
MSFE_sarma_demean
par.mod<-slot(out.par,"lm.par")
df1 <- data.frame(train_compare = ts168_train3, timestamp = seq(1,161,1))
df2 <- data.frame(par_fitted = par.mod$fitted.values, timestamp = seq(9,161,1))
df3 <- data.frame(sarma_fitted = SARMA_q4$fitted, timestamp = seq(1,161,1))
merged_df <- merge(df1, df2, by = "timestamp", all = TRUE)
merged_df <- merge(merged_df, df3, by = "timestamp", all = TRUE)
ggplot(merged_df, aes(x = timestamp)) +
geom_line(aes(y = train_compare, color = "Training Data")) +
geom_line(aes(y = par_fitted, color = "Par Fit")) +
geom_line(aes(y = sarma_fitted, color = "SARMA Fit")) +
labs(x = "Timestamp", y = "Value", color = "Data Type") +
ggtitle("Original, Fitted and Forecasted TS") +
theme_minimal()
# Mean squared Residuals
residuals_par <- par.mod$residuals
residuals_mse_par <- mean((residuals_par)^2)
residuals_mse_par
residuals_sarma <- SARMA_q4$residuals
residuals_mse_sarma <- mean((residuals_sarma)^2)
residuals_mse_sarma
par.pred<-predictperYW(ts168_train_perm$xd,7,1,NaN,(161+7))$new
h <- 7
SARMA_q4.forecast <- forecast(SARMA_q4, h)
plot(SARMA_q4.forecast)
par_demean_forecast = (ts168_train_perm$pmean + as.numeric(par.pred))
MSFE_par_demean = mean((par_demean_forecast - ts168_test_demean)^2)
MSFE_par_demean
sarma_demean_forecast = (ts168_train_perm$pmean + as.numeric(SARMA_q4.forecast$mean))
MSFE_sarma_demean = mean((sarma_demean_forecast - ts168_test_demean)^2)
MSFE_sarma_demean
ts168_train_perm$pmean
par.pred<-predictperYW(ts168_train_perm$xd,7,1,NaN,(161+7))$new
h <- 7
SARMA_q4.forecast <- forecast(SARMA_q4, h)
plot(SARMA_q4.forecast)
par_demean_forecast = (ts168_train_perm$pmean + as.numeric(par.pred))
MSFE_par_demean = mean((par_demean_forecast - ts168_test_demean)^2)
MSFE_par_demean
sarma_demean_forecast = (ts168_train_perm$pmean + as.numeric(SARMA_q4.forecast$mean))
MSFE_sarma_demean = mean((sarma_demean_forecast - ts168_test_demean)^2)
MSFE_sarma_demean
par_demean_forecast
ts168_test_demean
par_demean_forecast
par.pred<-predictperYW(ts168_train_perm$xd,7,1,NaN,(161+7))$new
h <- 7
SARMA_q4.forecast <- forecast(SARMA_q4, h)
plot(SARMA_q4.forecast)
par_demean_forecast = (ts168_train_perm$pmean + as.numeric(par.pred))
MSFE_par_demean = mean((as.numeric(par.pred) - ts168_test_demean)^2)
MSFE_par_demean
sarma_demean_forecast = (ts168_train_perm$pmean + as.numeric(SARMA_q4.forecast$mean))
MSFE_sarma_demean = mean((as.numeric(SARMA_q4.forecast$mean) - ts168_test_demean)^2)
MSFE_sarma_demean
par.pred<-predictperYW(ts168_train_perm$xd,7,1,NaN,(161+7))$new
h <- 7
SARMA_q4.forecast <- forecast(SARMA_q4, h)
plot(SARMA_q4.forecast)
#par_demean_forecast = (ts168_train_perm$pmean + as.numeric(par.pred))
MSFE_par_demean = mean((as.numeric(par.pred) - ts168_test_demean)^2)
MSFE_par_demean
#sarma_demean_forecast = (ts168_train_perm$pmean + as.numeric(SARMA_q4.forecast$mean))
MSFE_sarma_demean = mean((as.numeric(SARMA_q4.forecast$mean) - ts168_test_demean)^2)
MSFE_sarma_demean
MSFE_par_demean
MSFE_sarma_demean
